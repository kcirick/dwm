--- a/dwm.c	2010-06-04 06:39:15.000000000 -0400
+++ b/dwm.c	2011-01-10 15:37:41.053335105 -0500
@@ -20,6 +20,7 @@
  *
  * To understand everything else, start reading main().
  */
+#include <err.h>
 #include <errno.h>
 #include <locale.h>
 #include <stdarg.h>
@@ -54,6 +55,8 @@
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (textnw(X, strlen(X)) + dc.font.height)
 
+#define ROOT                    RootWindow(dpy, DefaultScreen(dpy))
+
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast };        /* cursor */
 enum { ColBorder, ColFG, ColBG, ColLast };              /* color */
@@ -243,6 +246,9 @@
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
+static void launcher(const Arg *arg);
+static pid_t shexec(const char *cmd);
+
 /* variables */
 static const char broken[] = "broken";
 static char stext[256];
@@ -2045,6 +2051,93 @@
 	arrange(c->mon);
 }
 
+void launcher(const Arg *arg){
+	int x, pos;
+	unsigned int i;
+	const char prompt[] = "Run: ";
+	char tmp[32];
+	char buf[256];
+	Bool grabbing = True;
+	KeySym ks;
+	XEvent ev;
+
+	// Clear the array
+	memset(tmp, 0, sizeof(tmp));
+	memset(buf, 0, sizeof(buf));
+	pos = 0;
+
+	// Initial x position
+	x = 0;
+	for(i = 0; i < LENGTH(tags); i++) x+= TEXTW(tags[i]);
+	x += TEXTW(selmon->ltsymbol);
+	dc.x = x;
+	dc.w = selmon->ww - x - TEXTW(stext);
+//	if(selmon->primary==1) dc.w -= systray_get_width(); // primary monitor has systray
+
+	XGrabKeyboard(dpy, ROOT, True, GrabModeAsync, GrabModeAsync, CurrentTime);
+
+	drawtext(prompt, dc.norm, False);
+	dc.x += TEXTW(prompt);
+	XDrawLine(dpy, dc.drawable, dc.gc, dc.x, 3, dc.x, bh-3);
+
+	XCopyArea(dpy, dc.drawable, selmon -> barwin, dc.gc, x, 0, dc.w, bh, x, 0);
+	XSync(dpy, False);
+
+	while(grabbing){
+		if(ev.type == KeyPress) {
+			XLookupString(&ev.xkey, tmp, sizeof(tmp), &ks, 0);
+
+			switch(ks){
+				case XK_Return:
+					shexec(buf);
+					grabbing = False;
+					break;
+				case XK_BackSpace:
+					if(pos) buf[--pos] = 0;
+					break;
+				case XK_Escape:
+					grabbing = False;
+					break;
+				default:
+					strncat(buf, tmp, sizeof(tmp));
+					++pos;
+					break;
+			}
+			drawtext(buf, dc.norm, False);
+			XDrawLine(dpy, dc.drawable, dc.gc, dc.x+TEXTW(buf), 3, dc.x+TEXTW(buf), bh-3);
+
+			XCopyArea(dpy, dc.drawable, selmon->barwin, dc.gc, dc.x, 0, dc.w-TEXTW(prompt), bh, dc.x, 0);
+			XSync(dpy, False);
+		}
+		XNextEvent(dpy, &ev);
+	}
+
+	// Restore bar
+	drawbar(selmon);
+
+	XUngrabKeyboard(dpy, CurrentTime);
+	return;
+}
+
+pid_t shexec(const char *cmd){
+	char *sh = NULL;
+	pid_t pid;
+
+	if(!(sh = getenv("SHELL"))) sh = "/bin/sh";
+
+	if((pid = fork()) == 0){
+		if(dpy) close(ConnectionNumber(dpy));
+
+		setsid();
+		execl(sh, sh, "-c", cmd, (char*)NULL);
+		err(1, "execl(%s)", cmd);
+	}
+	if (pid == -1)
+		warn("fork()");
+
+	return pid;
+}
+
 int
 main(int argc, char *argv[]) {
 	if(argc == 2 && !strcmp("-v", argv[1]))
